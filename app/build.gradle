/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'war'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    runtimeOnly 'org.postgresql:postgresql:42.7.3'
   // https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

war {
    archiveFileName = "mywar.war"
}

task copyAllDependencies(type: Copy) {
    from (configurations.runtimeClasspath.files)
    into ("${buildDir}/libs/lib")
}

task deployTomcat(type: Copy) {
    from(war.archiveFile.get())
    into ("/home/gfreeman/Documents/soft/apache-tomcat-10.1.30/webapps")
    dependsOn war
}

assemble.dependsOn deployTomcat

jar {
    def jars = configurations.runtimeClasspath.files.collect {"lib/${it.name}"}
    manifest {
        attributes 'Main-Class': 'uz.architect.Main',
                    'Class-Path': jars.join(' ')
    }
    dependsOn copyAllDependencies
    enabled = false
}

application {
    // Define the main class for the application.
    mainClass = 'uz.architect.Main'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
